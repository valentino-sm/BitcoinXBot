from typing import Optional

from pydantic import condecimal
from sqlalchemy import Column, Integer, BigInteger, String, Numeric
from sqlalchemy.ext.declarative import declarative_base

Model = declarative_base(name='Model')


class User(Model):
    __tablename__ = "main"

    id: Optional[int] = Column(BigInteger(), primary_key=True, autoincrement=True)
    userid: Optional[int] = Column(BigInteger(), index=True)
    username: Optional[str] = Column(String(60))
    signup: Optional[int] = Column(Integer())
    i: Optional[int] = Column(BigInteger())
    v: Optional[int] = Column(Integer())
    exp: Optional[str] = Column(String(1))
    def_cur: Optional[str] = Column(String(3))
    send_am: Optional[condecimal(max_digits=20, decimal_places=8)] = Column(Numeric(20, 8))
    send_as: Optional[str] = Column(String(5))
    send_ac: Optional[int] = Column(BigInteger())
    last_use: Optional[int] = Column(Integer())
    lang: Optional[str] = Column(String(2))
    parent: Optional[int] = Column(BigInteger())
    invited: Optional[int] = Column(Integer())
    earned: Optional[condecimal(max_digits=16, decimal_places=8)] = Column(Numeric(16, 8))
    do: Optional[str] = Column(String(70))
    BalUpdated: Optional[int] = Column(Integer())
    USD: Optional[condecimal(max_digits=20, decimal_places=4)] = Column(Numeric(20, 4))
    USDX: Optional[condecimal(max_digits=20, decimal_places=4)] = Column(Numeric(20, 4))
    EUR: Optional[condecimal(max_digits=20, decimal_places=4)] = Column(Numeric(20, 4))
    EURX: Optional[condecimal(max_digits=20, decimal_places=4)] = Column(Numeric(20, 4))
    RUB: Optional[condecimal(max_digits=20, decimal_places=4)] = Column(Numeric(20, 4))
    RUBX: Optional[condecimal(max_digits=20, decimal_places=4)] = Column(Numeric(20, 4))
    UAH: Optional[condecimal(max_digits=20, decimal_places=4)] = Column(Numeric(20, 4))
    UAHX: Optional[condecimal(max_digits=20, decimal_places=4)] = Column(Numeric(20, 4))
    BYN: Optional[condecimal(max_digits=20, decimal_places=4)] = Column(Numeric(20, 4))
    BYNX: Optional[condecimal(max_digits=20, decimal_places=4)] = Column(Numeric(20, 4))
    GEL: Optional[condecimal(max_digits=20, decimal_places=4)] = Column(Numeric(20, 4))
    GELX: Optional[condecimal(max_digits=20, decimal_places=4)] = Column(Numeric(20, 4))
    UZS: Optional[condecimal(max_digits=20, decimal_places=4)] = Column(Numeric(20, 4))
    UZSX: Optional[condecimal(max_digits=20, decimal_places=4)] = Column(Numeric(20, 4))
    KZT: Optional[condecimal(max_digits=20, decimal_places=4)] = Column(Numeric(20, 4))
    KZTX: Optional[condecimal(max_digits=20, decimal_places=4)] = Column(Numeric(20, 4))
    CNY: Optional[condecimal(max_digits=20, decimal_places=4)] = Column(Numeric(20, 4))
    CNYX: Optional[condecimal(max_digits=20, decimal_places=4)] = Column(Numeric(20, 4))
    BTC: Optional[condecimal(max_digits=16, decimal_places=8)] = Column(Numeric(16, 8))
    BTC_blocked: Optional[condecimal(max_digits=16, decimal_places=8)] = Column(Numeric(16, 8))
    UBTC: Optional[condecimal(max_digits=16, decimal_places=8)] = Column(Numeric(16, 8))
    UBTC_blocked: Optional[condecimal(max_digits=16, decimal_places=8)] = Column(Numeric(16, 8))
    ETH: Optional[condecimal(max_digits=16, decimal_places=8)] = Column(Numeric(16, 8))
    ETH_blocked: Optional[condecimal(max_digits=16, decimal_places=8)] = Column(Numeric(16, 8))
    BNB: Optional[condecimal(max_digits=16, decimal_places=4)] = Column(Numeric(16, 4))
    BNBX: Optional[condecimal(max_digits=16, decimal_places=4)] = Column(Numeric(16, 4))
    m_id: Optional[int] = Column(BigInteger())
    osl: Optional[int] = Column(Integer())
    bot: Optional[str] = Column(String(15))
    pr: Optional[int] = Column(Integer())
    comment: Optional[str] = Column(String(10))
    z: Optional[str] = Column(String(1))
    p: Optional[str] = Column(String(1))
