from aiogram import types, Dispatcher

from services.common import start, StartData
from telegram.keyboards.common import get_start_markup, StartKeyboardText
from telegram.utils import rate_limit
from utils.i18n import i18n
from utils.i18n import gettext as _
from utils.misc import from_none_dict


@rate_limit(1, 'start')
async def cmd_start(msg: types.Message):
    START_TEXT = _(
        "üéÆüå≤ <b>BitcoinXBot</b> ‚Ä¢ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–æ—à–µ–ª—ë–∫-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–ª–∞—Ç–µ–∂–µ–π —Å –∂–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é –∏ –±–µ–∑—É–ø—Ä–µ—á–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º. <b>–ó–∞–∫—Ä–µ–ø–∏ –≤ —Ç–æ–ø–µ.</b> /info\n"
        "\n"
        "–í–∞—à–∏ —Ñ–∏–∞—Ç–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã: ‚âà {sum_fiat_balance:.4f} <b>BTC</b>\n"
        "{assets}"
        "\n"
        "–í–∞—à–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞:\n"
        "ü¶ö {BTC:.8f} <b>BTC</b>\n"
        "\n"
        "–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: üå≤ {earned:.8f} <b>BTC</b>\n"
        "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {invited} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    KBD_TEXT = StartKeyboardText(
        fiat_deposit=_("–í–Ω–µ—Å—Ç–∏ RUB, USD"),
        fiat_withdraw=_("–í—ã–≤–µ—Å—Ç–∏ RUB, USD"),
        btc_deposit=_("üì• –í–Ω–µ—Å—Ç–∏ BTC"),
        btc_withdraw=_("üì§ –í—ã–≤–µ—Å—Ç–∏ BTC"),
        btc_to_ultra=_("–ó–∞–º–µ–Ω–∏—Ç—å ü¶ö BTC ‚Üí ü•¨ –£–ª—å—Ç—Ä–∞–ß–∏—Å—Ç—ã–µ BTC"),
        ultra_to_btc=_("–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ ü•¨ –£–ª—å—Ç—Ä–∞–ß–∏—Å—Ç—ã–µ BTC ‚Üí ü¶ö BTC"),
        services=_("üçá –£—Å–ª—É–≥–∏"),
        settings=_("üéõ –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
        refresh=_("‚ôª"),
    )

    data: StartData = await start()
    assets = "".join([
        f"üá∫üá∏ {data.USD:.4f} <b>USD</b>\n" if data.USD else "",
        f"üá∑üá∫ {data.RUB:.4f} <b>RUB</b>\n" if data.RUB else "",
        f"üá™üá∫ {data.EUR:.4f} <b>EUR</b>\n" if data.EUR else "",
        f"üá®üá≥ {data.CNY:.4f} <b>CNY</b>\n" if data.CNY else "",
    ])
    await msg.answer(
        text=START_TEXT.format(**from_none_dict(data._asdict()), assets=assets),
        reply_markup=await get_start_markup(KBD_TEXT)
    )


@rate_limit(3, 'language')
async def cq_change_language(query: types.CallbackQuery, callback_data: dict):
    await query.answer()
    _data = await Dispatcher.get_current().current_state().get_data()
    if _data["lang"] != callback_data["value"]:
        await i18n.set_user_locale(callback_data["value"])
    await cmd_start(query.message)


async def cmd_info(msg: types.Message):
    HELP_TEXT = _(
        '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: \n'
        '/start - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥\n'
        '/info - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É'
    )
    await msg.answer(HELP_TEXT)
